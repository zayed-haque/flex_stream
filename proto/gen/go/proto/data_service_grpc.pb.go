// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.19.6
// source: proto/data_service.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	DataIngestion_SendData_FullMethodName = "/flexstream.DataIngestion/SendData"
)

// DataIngestionClient is the client API for DataIngestion service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// DataIngestion service handles incoming data
type DataIngestionClient interface {
	SendData(ctx context.Context, in *DataPayload, opts ...grpc.CallOption) (*Response, error)
}

type dataIngestionClient struct {
	cc grpc.ClientConnInterface
}

func NewDataIngestionClient(cc grpc.ClientConnInterface) DataIngestionClient {
	return &dataIngestionClient{cc}
}

func (c *dataIngestionClient) SendData(ctx context.Context, in *DataPayload, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, DataIngestion_SendData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DataIngestionServer is the server API for DataIngestion service.
// All implementations must embed UnimplementedDataIngestionServer
// for forward compatibility.
//
// DataIngestion service handles incoming data
type DataIngestionServer interface {
	SendData(context.Context, *DataPayload) (*Response, error)
	mustEmbedUnimplementedDataIngestionServer()
}

// UnimplementedDataIngestionServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDataIngestionServer struct{}

func (UnimplementedDataIngestionServer) SendData(context.Context, *DataPayload) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendData not implemented")
}
func (UnimplementedDataIngestionServer) mustEmbedUnimplementedDataIngestionServer() {}
func (UnimplementedDataIngestionServer) testEmbeddedByValue()                       {}

// UnsafeDataIngestionServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DataIngestionServer will
// result in compilation errors.
type UnsafeDataIngestionServer interface {
	mustEmbedUnimplementedDataIngestionServer()
}

func RegisterDataIngestionServer(s grpc.ServiceRegistrar, srv DataIngestionServer) {
	// If the following call pancis, it indicates UnimplementedDataIngestionServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&DataIngestion_ServiceDesc, srv)
}

func _DataIngestion_SendData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DataPayload)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataIngestionServer).SendData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataIngestion_SendData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataIngestionServer).SendData(ctx, req.(*DataPayload))
	}
	return interceptor(ctx, in, info, handler)
}

// DataIngestion_ServiceDesc is the grpc.ServiceDesc for DataIngestion service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DataIngestion_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "flexstream.DataIngestion",
	HandlerType: (*DataIngestionServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendData",
			Handler:    _DataIngestion_SendData_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/data_service.proto",
}

const (
	DataAPI_GetProcessedData_FullMethodName = "/flexstream.DataAPI/GetProcessedData"
)

// DataAPIClient is the client API for DataAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// DataAPI service provides access to processed data
type DataAPIClient interface {
	GetProcessedData(ctx context.Context, in *DataRequest, opts ...grpc.CallOption) (*ProcessedData, error)
}

type dataAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewDataAPIClient(cc grpc.ClientConnInterface) DataAPIClient {
	return &dataAPIClient{cc}
}

func (c *dataAPIClient) GetProcessedData(ctx context.Context, in *DataRequest, opts ...grpc.CallOption) (*ProcessedData, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProcessedData)
	err := c.cc.Invoke(ctx, DataAPI_GetProcessedData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DataAPIServer is the server API for DataAPI service.
// All implementations must embed UnimplementedDataAPIServer
// for forward compatibility.
//
// DataAPI service provides access to processed data
type DataAPIServer interface {
	GetProcessedData(context.Context, *DataRequest) (*ProcessedData, error)
	mustEmbedUnimplementedDataAPIServer()
}

// UnimplementedDataAPIServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDataAPIServer struct{}

func (UnimplementedDataAPIServer) GetProcessedData(context.Context, *DataRequest) (*ProcessedData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProcessedData not implemented")
}
func (UnimplementedDataAPIServer) mustEmbedUnimplementedDataAPIServer() {}
func (UnimplementedDataAPIServer) testEmbeddedByValue()                 {}

// UnsafeDataAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DataAPIServer will
// result in compilation errors.
type UnsafeDataAPIServer interface {
	mustEmbedUnimplementedDataAPIServer()
}

func RegisterDataAPIServer(s grpc.ServiceRegistrar, srv DataAPIServer) {
	// If the following call pancis, it indicates UnimplementedDataAPIServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&DataAPI_ServiceDesc, srv)
}

func _DataAPI_GetProcessedData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataAPIServer).GetProcessedData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataAPI_GetProcessedData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataAPIServer).GetProcessedData(ctx, req.(*DataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DataAPI_ServiceDesc is the grpc.ServiceDesc for DataAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DataAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "flexstream.DataAPI",
	HandlerType: (*DataAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetProcessedData",
			Handler:    _DataAPI_GetProcessedData_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/data_service.proto",
}
